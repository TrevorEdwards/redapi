difference = (require './lib/utils').difference
assert_print = (require './lib/utils').assert_print

isita = require 'isita'

################################# Ex functions #################################

##
# Performs check to ensure all keys in the json are in the model.
# model object, json -> boolean
ex_model_encompassing = (model, json) ->
  console.log """

    Model is an object:
      #{model}

  """ if !(model)
  return false

  jkeys = (Object.keys json)
  mkeys = (Object.keys model)

  console.log jkeys
  console.log mkeys

  console.log """

    Model is not fully encompassing. It lacks the following keys:
      #{difference jkeys, mkeys}

  """ if !!(difference jkeys, mkeys).length
  return  !(difference jkeys, mkeys).length

##
# (json -> boolean), json -> boolean
ex_model_fufills = (mval, jval) ->
  # verifier needs to be a function
  verified = (isita.function mval)
  
  console.log """
    
    Model verifier is not a function.
      '#{mval.toString()}'

  """ if not verified
  false if not verified

  # verifier approves?
  try
    verified = (mval jval)
  catch e
    console.log mval.toString()
    console.log jval
    console.trace e
  

  console.log """
    
    Model doesn't match implementation. Following value
      #{jval}
    failed verification
      #{mval.toString()}

  """ if not verified
  return verified
# test_object = 'hello'
# test_model = (x) -> typeof x is 'number'
# console.log (ex_model_fufills test_model, test_object)

#################################### Check. ####################################

##
# model object, json -> boolean
check = (model, json) ->
  jkeys = (Object.keys json)
  mkeys = (Object.keys model)

  try
    # Nono, only defined properties plz
    return false if not (ex_model_encompassing model, json)

    for jkey in jkeys
      jval = json[jkey]  # Json
      mval = model[jkey] # function

      return false if not (ex_model_fufills mval, jval)

    return true
  catch e
    console.log "error checking"
    console.trace e
  

##
# model object -> (json -> boolean)
object = (model) -> (json) -> (check model, json)
# test_object = {a : 1}
# test_model = object
#   a : (x) -> typeof x is 'string'
# console.log (test_model test_object)

check_every = (models, jsons) ->

  verified = (isita.array jsons)

  console.log """
    
    Json is not an array.
      
      '#{jsons}'

  """ if not verified
  false if not verified

  if not (isita.array jsons)
    console.log 

  for i in jsons
    return false if not models.reduce (acc, t) ->
      acc || (t i)
    , false
  return true

##
# array of (json -> boolean) -> (json_array -> boolean)
array = (tester_array) -> 
  # make sure it's all on point
  if not (isita.array tester_array)
    console.log " > Tester array is not an array."
    console.log "  ", tester_array

  if not (tester_array.reduce ((acc, x) -> acc and (isita.function x)), true)
    console.log " > Not all elements in tester array are functions."
    console.log "  ", tester_array

  # return the verifier function
  (json_array) -> (check_every tester_array, json_array)


# test_array = ['hello', '34']
# test_model = array [
#   (x) -> typeof x is 'string'
# ]
# console.log (test_model test_array)

##
# (json -> boolean) -> (json -> boolean)
nullable = (f) -> (json) -> json is null || (f json)
one_of = ->
  args = Array::slice.call(arguments)
  (json) ->
    for f in args
      return true if (f json)
    return false
  
all_of = ->
  args = Array::slice.call(arguments)
  (json) ->
    for f in args
      return true if (f json)
    return false

# menu = one_of
#   object
#     a: string
#     b: number
#   array
#     string
#     boolean
#     object
#       a: string
#       b: boolean


################################### Ayy lmao ###################################

module.exports.object = object
module.exports.array  = array

############################# Integration testing. #############################

if require.main is module
  
  # assert_print (ex_model_encompassing
  #     a : (x) -> true
  #     b : (x) -> true
  #   ,
  #     a : true
  #     c : true
  #   )
  # , false
  
  assert_print (ex_model_encompassing
      a : (x) -> return true
      b : (x) -> return true
    ,
      a : true
      b : true
    )
  , true
  
  # events_model = object
  #   okenshields : array [
  #     object
  #       summary : (x) -> typeof x is 'string'
  #       start   : (x) -> true
  #       end     : (x) -> true
  #     (x) -> typeof x is 'string'
  #   ]

  # test_data =
  #   okenshields: [ 
  #     { 
  #       summary: 'Open until 2:30pm'
  #       start: true
  #       end: true 
  #     }
  #   ]
  
  # console.log (events_model test_data)


